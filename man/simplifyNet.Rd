% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simplifyNet.R
\name{simplifyNet}
\alias{simplifyNet}
\title{Network Sparsification}
\usage{
simplifyNet(
  data,
  method = "Toivonen",
  model,
  func,
  cutoff,
  remove.prop,
  num.samples,
  epsilon,
  matrix.sparse = FALSE,
  num.nodes = NULL
)
}
\arguments{
\item{data}{edge list structured | node 1 | node 2 | weight | as class data.frame, adjacency matrix of class matrix or sparseMatrix object}

\item{method}{algorithm used to remove edges, currently includes Toivonen (best-path), Refit and LocalAdapt. Default is Toivonen; default is Toivonen}

\item{model}{model to run on network for iterative sparsification process (NOT YET IMPLEMENTED)}

\item{func}{scoring function for iterative sparsification (NOT YET IMPLEMENTED)}

\item{cutoff}{minimum edge weight to retain in simplified network}

\item{remove.prop}{argument can be passed to LocalAdapt or GlobalSparse to remove a set proportion of edges instead of using statistical cutoff}

\item{num.samples}{number of samples to take for Effective Resistance sampling}

\item{epsilon}{level of approximation for calculating effective resistance}

\item{matrix.sparse}{choose to return sparseMatrix adjacency matrix; default is \code{FALSE}}

\item{num.nodes}{if there are disconnected nodes, specify the number of nodes for output; default is \code{NULL}}
}
\value{
Sparsified network through the given method in the class as inputted network data
}
\description{
Possible methods \cr
1. Toivonen - Remove all edges that are not part of best path, algorithm from Toivonen et al. implemented with 'igraph' package \cr
2. GlobalSparse - Remove edges under an edge weight cutoff \cr
3. LocalSparse - Remove weakest edges locally rather than globally, can set proportion or use refitting and cutoff \cr
4. EffectiveResistance - Randomly samples edges with probability proportional to the effective resistance of that edge, algorithm from Spielman and Srivastava (untested on directed networks) \cr
}
\examples{
A <- ER_gen(n=100, p=0.1, weights=1)
G <- simplifyNet(data=A, method="Toivonen")

n <- 100
p <- 0.1
weights <- c(0.25, 0.5, 0.75, 1)
w.prob <- c(0.50, 0.25, 0.15, 0.10)
A <- ER_gen(n=n, p=p, weights=weights, w.prob=w.prob)
G <- simplifyNet(data=A, method="GlobalSparse", cutoff=0.5)

A <- ER_gen(n=100, p=0.1, weights=1)
G <- simplifyNet(data=A, method="LocalSparse", remove.prop=0.6)

A <- ER_gen(n=100, p=0.1, weights=1)
num.samples = length(Mtrx_EList(A))
G <- simplifyNet(data=A, method="EffectiveResistance", num.samples=num.samples, epsilon=0.1)
}
\author{
Andrew M. Kramer
}
